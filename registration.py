from source import (BOT, ADM, ADM_ID, USER_STATES,
                    REG_STATES, WALLET_BTNS,
                    MAX_LEN_NAME, MAX_LEN_SURNAME,
                    MENU_BTNS, SEX_BTNS, POOL)
from common import (ShowButtons, Stamp, InlineButtons,
                    FormatTime, HandleMedia)
from connect import GetConCur
from telebot.types import Message
from re import match
from source import DRIVE_PATTERN


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[0])
def AcceptSex(message: Message) -> None:
    Stamp(f'User {message.from_user.id} choosing sex', 'i')
    if message.text not in SEX_BTNS:
        ShowButtons(BOT, message.from_user.id, SEX_BTNS, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:')
        return
    with GetConCur(POOL) as (con, cur):
        sex = 'M' if message.text == SEX_BTNS[0] else 'F'
        cur.execute("UPDATE users SET sex = %s WHERE id = %s", (sex, message.from_user.id))
        con.commit()
    USER_STATES[message.from_user.id] = REG_STATES[1]
    BOT.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[1])
def AcceptName(message: Message) -> None:
    Stamp(f'User {message.from_user.id} entering name', 'i')
    name = message.text.strip()
    if not match(r'^[–ê-–Ø–∞-—è–Å—ë-]+$', name) or len(name) > MAX_LEN_NAME or len(name) < 2:
        BOT.send_message(message.from_user.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:')
        return
    with GetConCur(POOL) as (con, cur):
        cur.execute("UPDATE users SET name = %s WHERE id = %s", (name, message.from_user.id))
        con.commit()
    USER_STATES[message.from_user.id] = REG_STATES[2]
    BOT.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:')


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[2])
def AcceptSurname(message: Message) -> None:
    Stamp(f'User {message.from_user.id} entering surname', 'i')
    surname = message.text.strip()
    if not match(r'^[–ê-–Ø–∞-—è–Å—ë-]+$', surname) or len(surname) > MAX_LEN_SURNAME or len(surname) < 2:
        BOT.send_message(message.from_user.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:')
        return
    with GetConCur(POOL) as (con, cur):
        cur.execute("UPDATE users SET surname = %s WHERE id = %s", (surname, message.from_user.id))
        con.commit()
    USER_STATES[message.from_user.id] = REG_STATES[3]
    BOT.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ 11 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –¥—Ä—É–≥–∏—Ö –∑–Ω–∞–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, 89151234567:')


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[3])
def AcceptNumDigits(message: Message) -> None:
    Stamp(f'User {message.from_user.id} entering phone', 'i')
    if len(message.text.strip()) != 11 or not message.text.strip().isdigit():
        BOT.send_message(message.from_user.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 89151234567:')
        return
    with GetConCur(POOL) as (con, cur):
        cur.execute("UPDATE users SET phone = %s WHERE id = %s", (message.text.strip(), message.from_user.id))
        con.commit()
    USER_STATES[message.from_user.id] = REG_STATES[4]
    BOT.send_message(message.from_user.id, '‚ùî –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫:')


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[4], content_types=['video', 'document', 'text'])
def HandleVideoLink(message: Message) -> None:
    Stamp(f'User {message.from_user.id} uploading video', 'i')
    HandleMedia(message, 'video_link', f'{message.from_user.id}_wlc.mp4')
    USER_STATES[message.from_user.id] = REG_STATES[5]
    ShowButtons(BOT, message.from_user.id, WALLET_BTNS, '‚ùî –£ –≤–∞—Å –µ—Å—Ç—å –∫–æ—à–µ–ª–µ–∫ WB —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º?')


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[5])
def VerifyWallet(message: Message) -> None:
    Stamp(f'User {message.from_user.id} verifying wallet', 'i')
    if message.text not in WALLET_BTNS:
        ShowButtons(BOT, message.from_user.id, WALLET_BTNS, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:')
    elif message.text == WALLET_BTNS[0]:
        del USER_STATES[message.from_user.id]
        BOT.send_message(message.from_user.id, '‚úîÔ∏è –°–ø–∞—Å–∏–±–æ, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!')
        InlineButtons(ADM, ADM_ID, ['‚úÖ –ü—Ä–∏–Ω—è—Ç—å', '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å'], ShowUserInfo(message.from_user.id),
                      [f'accept_{message.from_user.id}', f'reject_{message.from_user.id}'])
        ShowButtons(BOT, message.from_user.id, MENU_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    elif message.text == WALLET_BTNS[1]:
        ShowButtons(BOT, message.from_user.id, WALLET_BTNS, '‚ò¢Ô∏è –ü—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!')


def ShowUserInfo(user_id: int) -> str | None:
    with GetConCur(POOL) as (con, cur):
        cur.execute("SELECT * FROM users WHERE id = %s", (user_id,))
        user = cur.fetchone()
    if not user:
        BOT.send_message(user_id, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!')
        return
    text = f'üÜî ID: {user[0]}\n' \
           f'üöπ –ü–æ–ª: {user[1]}\n' \
           f'üë§ –ò–º—è: {user[2]}\n' \
           f'üë• –§–∞–º–∏–ª–∏—è: {user[3]}\n' \
           f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user[4]}\n' \
           f'üìÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: {FormatTime(user[5])}\n' \
           f'üìπ –í–∏–¥–µ–æ: {DRIVE_PATTERN.format(user[6])}\n' \
           f'üÜï –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è QR-–∫–æ–¥–∞: {FormatTime(user[7])}\n'
    if user[8]:
        text += f'üî≥ QR-–∫–æ–¥: {DRIVE_PATTERN.format(user[8])}\n'
    return text


def AcceptNewUser(message: Message) -> None:
    with GetConCur(POOL) as (con, cur):
        Stamp(f'User {message.from_user.id} registering at first', 'i')
        cur.execute("SELECT COUNT(*) FROM users WHERE id = %s", (message.from_user.id,))
        user_count = cur.fetchone()[0]
        if user_count == 1:
            BOT.send_message(message.from_user.id, '‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        elif user_count == 0:
            cur.execute("INSERT INTO users (id) VALUES (%s)", (message.from_user.id,))
            con.commit()
            USER_STATES[message.from_user.id] = REG_STATES[0]
            ShowButtons(BOT, message.from_user.id, SEX_BTNS, '‚ùî –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:')
        else:
            Stamp(f'User {message.from_user.id} registered multiple times', 'w')
            ADM.send_message(ADM_ID, f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑!')
