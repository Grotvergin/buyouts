from common import FormatTime, ShowButtons
from telebot.types import Message, CallbackQuery
from common import Stamp, HandlePhoto, GetPositionByOffice
from connect import GetConCur
from source import (BOT, STATUS_BTNS, MENU_BTNS,
                    POOL, TIME_BEFORE_BUYOUT, WB_PATTERN)


def ShowAvailableBuyouts(message: Message | CallbackQuery) -> None:
    with GetConCur(POOL) as (con, cur):
        cur.execute('SELECT conf_time FROM users WHERE id = %s', (message.from_user.id,))
        conf_time = cur.fetchone()[0]
        if not conf_time:
            BOT.send_message(message.from_user.id, 'üï¶ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç!')
            return
        cur.execute('SELECT * FROM available')
        buyout = cur.fetchone()
        if buyout:
            AssignBuyout(message.from_user.id, buyout[0])
        else:
            BOT.send_message(message.from_user.id, 'ü´§ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã–∫—É–ø–æ–≤!')
            ShowButtons(BOT, message.from_user.id, MENU_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')


def AssignBuyout(user_id: int, buyout_id: int) -> None:
    Stamp(f'User {user_id} is assigning buyout {buyout_id}', 'i')
    with GetConCur(POOL) as (con, cur):
        already_taken_num = cur.execute("""SELECT COUNT(*)
                                           FROM buyouts
                                           WHERE user_id = %s
                                           AND fact_time IS NULL""",
                                        (user_id,))
        if already_taken_num:
            BOT.send_message(user_id, '‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—ã–∫—É–ø!')
            ShowButtons(BOT, user_id, MENU_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
            return
        cur.execute('SELECT plan_time FROM buyouts WHERE id = %s', (buyout_id,))
        planned_time = cur.fetchone()[0]
        cur.execute('UPDATE buyouts SET user_id = %s WHERE id = %s', (user_id, buyout_id))
        con.commit()
        BOT.send_message(user_id, f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—ã–∫—É–ø, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç—Å—è  {FormatTime(planned_time)}.\n'
                                               f'üïí –ó–∞ {TIME_BEFORE_BUYOUT} –º–∏–Ω—É—Ç –¥–æ –≤—ã–∫—É–ø–∞ —è –ø—Ä–∏—à–ª—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é!')


def AcceptHistory(message: Message, buyout_id: int) -> None:
    Stamp(f'User {message.from_user.id} uploading history photo', 'i')
    HandlePhoto(message, 'buyouts', 'photo_hist_link', 'hist', buyout_id)
    BOT.send_message(message.from_user.id, 'üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞')
    BOT.register_next_step_handler(message, AcceptGood, buyout_id)


def AcceptGood(message: Message, buyout_id: int) -> None:
    Stamp(f'User {message.from_user.id} uploading good photo', 'i')
    HandlePhoto(message, 'buyouts', 'photo_good_link', 'good', buyout_id)
    ShowButtons(BOT, message.from_user.id, MENU_BTNS, 'üîÑ –°–ø–∞—Å–∏–±–æ, –≤—ã–∫—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!')


def AcceptArrival(message: Message, buyout_id: int) -> None:
    Stamp(f'User {message.from_user.id} uploading arrival photo', 'i')
    HandlePhoto(message, 'buyouts', 'photo_arrival_link', 'arrival', buyout_id)
    ShowButtons(BOT, message.from_user.id, MENU_BTNS, 'üîÑ –°–ø–∞—Å–∏–±–æ, –≤—ã–∫—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!')


def ShowMyBuyouts(message: Message) -> None:
    base = """SELECT pick_point_id, plan_time, delivery_time,
              feedback, price, good_id, request
              FROM buyouts JOIN plans on buyouts.plan_id = plans.id
              WHERE user_id = %s"""
    with GetConCur(POOL) as (con, cur):
        if message.text == STATUS_BTNS[0]:
            cur.execute(base + 'AND fact_time IS NULL', (message.from_user.id,))
        elif message.text == STATUS_BTNS[1]:
            cur.execute(base +
                        'AND fact_time IS NOT NULL ' +
                        'AND delivery_time IS NULL', (message.from_user.id,))
        elif message.text == STATUS_BTNS[2]:
            cur.execute(base + 'AND delivery_time IS NOT NULL', (message.from_user.id,))
        else:
            BOT.send_message(message.from_user.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞...')
            ShowButtons(BOT, message.from_user.id, MENU_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
            return
        buyouts = cur.fetchall()
    if not buyouts:
        BOT.send_message(message.from_user.id, 'üí§ –¢–∞–∫–∏—Ö –≤—ã–∫—É–ø–æ–≤ –Ω–µ—Ç...')
        ShowButtons(BOT, message.from_user.id, MENU_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        return
    for buyout in buyouts:
        text = ''
        if buyout[0]:
            text += f'üìç –ê–¥—Ä–µ—Å –ü–í–ó: {GetPositionByOffice(buyout[0])}\n'
        if buyout[1]:
            text += f'üïò –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–∫—É–ø–∞: {FormatTime(buyout[1])}\n'
        if buyout[2]:
            text += f'üïò –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {FormatTime(buyout[2])}\n'
        if buyout[3]:
            text += f'üß® –û—Ç–∑—ã–≤ : {FormatTime(buyout[3])}\n'
        if buyout[4]:
            text += f'üí∞ –¶–µ–Ω–∞: {buyout[4]}\n'
        if buyout[5]:
            text += f'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {WB_PATTERN.format(buyout[5])}\n'
        if buyout[6]:
            text += f'üìù –ó–∞–ø—Ä–æ—Å: {buyout[6]}\n'
        BOT.send_message(message.from_user.id, text)
    ShowButtons(BOT, message.from_user.id, MENU_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
