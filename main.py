from source import *


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[0])
def AcceptSex(message: Message) -> None:
    Stamp(f'User {message.from_user.id} choosing sex', 'i')
    if message.text not in SEX_BTNS:
        ShowButtons(message, SEX_BTNS, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:')
        return
    sex = 'M' if message.text == SEX_BTNS[0] else 'F'
    CUR.execute("UPDATE users SET sex = %s WHERE id = %s", (sex, message.from_user.id))
    CON.commit()
    USER_STATES[message.from_user.id] = REG_STATES[1]
    BOT.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[1])
def AcceptName(message: Message) -> None:
    Stamp(f'User {message.from_user.id} entering name', 'i')
    name = message.text.strip()
    if not match(r'^[–ê-–Ø–∞-—è–Å—ë-]+$', name) or len(name) > MAX_LEN_NAME:
        BOT.send_message(message.from_user.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:')
        return
    CUR.execute("UPDATE users SET name = %s WHERE id = %s", (name, message.from_user.id))
    CON.commit()
    USER_STATES[message.from_user.id] = REG_STATES[2]
    BOT.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:')


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[2])
def AcceptSurname(message: Message) -> None:
    Stamp(f'User {message.from_user.id} entering surname', 'i')
    surname = message.text.strip()
    if not match(r'^[–ê-–Ø–∞-—è–Å—ë-]+$', surname) or len(surname) > MAX_LEN_SURNAME:
        BOT.send_message(message.from_user.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é:')
        return
    CUR.execute("UPDATE users SET surname = %s WHERE id = %s", (surname, message.from_user.id))
    CON.commit()
    USER_STATES[message.from_user.id] = REG_STATES[3]
    BOT.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ 11 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ –¥—Ä—É–≥–∏—Ö –∑–Ω–∞–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, 89151234567:')


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[3])
def AcceptNumDigits(message: Message) -> None:
    Stamp(f'User {message.from_user.id} entering phone', 'i')
    if len(message.text.strip()) != 11 or not message.text.strip().isdigit():
        BOT.send_message(message.from_user.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 89151234567:')
        return
    CUR.execute("UPDATE users SET phone = %s WHERE id = %s", (message.text.strip(), message.from_user.id))
    CON.commit()
    CUR.execute("SELECT * FROM cities")
    cities = [row[0] for row in CUR.fetchall()]
    USER_STATES[message.from_user.id] = REG_STATES[4]
    InlineButtons(message.from_user.id, cities, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:', [f'city_{city}' for city in cities])


@BOT.callback_query_handler(func=lambda call: call.data.startswith('city_'))
def HandleCityCallback(call: CallbackQuery) -> None:
    Stamp(f'User {call.from_user.id} choosing city', 'i')
    city = call.data.split('_')[1]
    CUR.execute("UPDATE users SET city = %s WHERE id = %s", (city, call.from_user.id))
    CON.commit()
    USER_STATES[call.from_user.id] = REG_STATES[5]
    BOT.send_message(call.from_user.id, '‚ùî –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫:')


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[5], content_types=['video', 'document', 'text'])
def HandleVideoLink(message: Message) -> None:
    Stamp(f'User {message.from_user.id} uploading video', 'i')
    video_file_info = None
    if message.video:
        video_file_info = BOT.get_file(message.video.file_id)
    elif message.document and message.document.mime_type.startswith('video/'):
        video_file_info = BOT.get_file(message.document.file_id)
    if not video_file_info:
        BOT.send_message(message.from_user.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:')
        return
    BOT.send_message(message.from_user.id, 'üîÑ –í–∞—à–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    try:
        video_file = BOT.download_file(video_file_info.file_path)
        path = f"{message.from_user.id}_welcome.mp4"
        with open(path, 'wb') as new_file:
            new_file.write(video_file)
        media = MediaFileUpload(path, mimetype='video/mp4')
        file = SERVICE.files().create(body={'name': path}, media_body=media, fields='id').execute()
        SERVICE.permissions().create(fileId=file.get('id'), body={'type': 'anyone', 'role': 'reader'}).execute()
        video_link = f"https://drive.google.com/file/d/{file.get('id')}/view?usp=sharing"
        CUR.execute("UPDATE users SET video_link = %s WHERE id = %s", (video_link, message.from_user.id))
        CON.commit()
        remove(path)
    except Exception as e:
        BOT.send_message(message.from_user.id, f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞!')
        Stamp(f'Error while uploading a file: {str(e)}', 'e')
    USER_STATES[message.from_user.id] = REG_STATES[6]
    ShowButtons(message, WALLET_BTNS, '‚ùî –£ –≤–∞—Å –µ—Å—Ç—å –∫–æ—à–µ–ª–µ–∫ WB —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º?')


@BOT.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == REG_STATES[6])
def VerifyWallet(message: Message) -> None:
    Stamp(f'User {message.from_user.id} verifying wallet', 'i')
    if message.text not in WALLET_BTNS:
        ShowButtons(message, WALLET_BTNS, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:')
    elif message.text == WALLET_BTNS[0]:
        del USER_STATES[message.from_user.id]
        BOT.send_message(message.from_user.id, '‚úîÔ∏è –°–ø–∞—Å–∏–±–æ, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!')
        ShowButtons(message, MENU_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    elif message.text == WALLET_BTNS[1]:
        ShowButtons(message, WALLET_BTNS, '‚ò¢Ô∏è –ü—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!')


def PrepareBuyouts(user_id: int = None) -> dict | None:
    if user_id:
        CUR.execute('SELECT * FROM fetch_buyouts_for_user(%s)', (user_id,))
    else:
        CUR.execute('SELECT * FROM upcoming_buyouts')
    buyouts = CUR.fetchall()
    if not buyouts:
        return
    info = {}
    for buyout in buyouts:
        text = ''
        status = STATUSES[0]
        reward = AWARD_BUYOUT
        if buyout[0]:
            text += f'üìç ID –ü–í–ó (–≤ –±—É–¥—É—â–µ–º ‚Äì –∞–¥—Ä–µ—Å): {buyout[0]}\n'
        if buyout[1]:
            status = STATUSES[1]
        if buyout[2]:
            text += f'üïò –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–∫—É–ø–∞: {buyout[2]}\n'
        if buyout[3]:
            text += f'üèÅ –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–∫—É–ø–∞: {buyout[3]}\n'
            status = STATUSES[2]
        if buyout[4]:
            text += f'üöõ –î–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ü–í–ó: {buyout[4]}\n'
            status = STATUSES[3]
        if buyout[5]:
            text += f'üì§ –ó–∞–±—Ä–∞–Ω –∏–∑ –ü–í–ó: {buyout[5]}\n'
            status = STATUSES[4]
        if buyout[6]:
            text += f'üìù –û—Ç–∑—ã–≤: {buyout[6]}\n'
            reward += AWARD_FEEDBACK
        if buyout[7]:
            text += f'üîó –°—Å—ã–ª–∫–∞: {buyout[7]}\n'
        if buyout[9]:
            text += f'üìÑ –ó–∞–ø—Ä–æ—Å: {buyout[9]}\n'
        text += f'üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {reward} ‚ÇΩ\n'
        text += f'‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n'
        info[buyout[10]] = (text, status)
    return info


def SendBuyouts(user_id: int, status: str = None, all_statuses: bool = False) -> None:
    sent_at_least_one = False
    if status == STATUSES[0]:
        buyouts = PrepareBuyouts()
    else:
        buyouts = PrepareBuyouts(user_id)
    if buyouts:
        for one in buyouts.keys():
            if buyouts[one][1] == status or all_statuses:
                sent_at_least_one = True
                btn_text, clbk_data = STATUSES_AND_BTNS[buyouts[one][1]]
                InlineButtons(user_id, [btn_text], buyouts[one], [f'{clbk_data}{one}'])
    if not sent_at_least_one:
        if all_statuses:
            BOT.send_message(user_id, f'‚ùå –ù–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –≤—ã–∫—É–ø–æ–≤!')
        else:
            BOT.send_message(user_id, f'‚ùå –ù–µ—Ç –≤—ã–∫—É–ø–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status}!')


def ShowUserInfo(user_id: int) -> str | None:
    CUR.execute("SELECT * FROM users WHERE id = %s", (user_id,))
    user = CUR.fetchone()
    if not user:
        BOT.send_message(user_id, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!')
        return
    text = f'üÜî ID: {user[0]}\n' \
           f'üöπ –ü–æ–ª: {user[1]}\n' \
           f'üë§ –ò–º—è: {user[2]}\n' \
           f'üë• –§–∞–º–∏–ª–∏—è: {user[3]}\n' \
           f'üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user[4]}\n' \
           f'üèô –ì–æ—Ä–æ–¥: {user[5]}\n' \
           f'üìÖ –î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {user[6]}\n' \
           f'üìπ –í–∏–¥–µ–æ: {user[7]}\n' \
           f'üÜï –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è QR-–∫–æ–¥–∞: {user[7]}\n' \
           f'üî≥ QR-–∫–æ–¥: {user[8]}\n'
    return text


@BOT.callback_query_handler(func=lambda call: call.data.startswith(CALLBACKS[0]))
def HandleChooseCallback(call: CallbackQuery) -> None:
    buyout_id = call.data.split('_')[1]
    try:
        CUR.execute("UPDATE buyouts SET user_id = %s WHERE id = %s", (call.from_user.id, buyout_id))
        CON.commit()
        BOT.send_message(call.from_user.id, '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—ã–∫—É–ø!')
    except Exception as e:
        BOT.send_message(call.from_user.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—ã–∫—É–ø!')
        Stamp(f'Error while handling take callback: {str(e)}', 'e')


@BOT.callback_query_handler(func=lambda call: call.data.startswith(CALLBACKS[1]))
def HandleOrderedCallback(call: CallbackQuery) -> None:
    buyout_id = call.data.split('_')[1]
    try:
        CUR.execute("SELECT good_link FROM plans AS p JOIN buyouts AS b ON p.id = b.plan_id WHERE b.id = %s", (buyout_id,))
        good_link = CUR.fetchone()[0]
        CUR.execute("UPDATE buyouts SET fact_time = NOW(), price = %s WHERE id = %s", (GetPriceGood(good_link), buyout_id))
        CON.commit()
        BOT.send_message(call.from_user.id, '‚úÖ –ß–µ—Ç–∫–æ, –≤–∏–∂—É –∑–∞–∫–∞–∑–∞–ª!')
    except Exception as e:
        BOT.send_message(call.from_user.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!')
        Stamp(f'Error while handling ordered callback: {str(e)}', 'e')


@BOT.callback_query_handler(func=lambda call: call.data.startswith(CALLBACKS[2]))
def HandleArrivedCallback(call: CallbackQuery) -> None:
    buyout_id = call.data.split('_')[1]
    try:
        CUR.execute("UPDATE buyouts SET delivery_time = NOW() WHERE id = %s", (buyout_id,))
        CON.commit()
        BOT.send_message(call.from_user.id, '‚úÖ –ß–µ—Ç–∫–æ, –≤–∏–∂—É –ø—Ä–∏–µ—Ö–∞–ª!')
    except Exception as e:
        BOT.send_message(call.from_user.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!')
        Stamp(f'Error while handling arrived callback: {str(e)}', 'e')


@BOT.callback_query_handler(func=lambda call: call.data.startswith(CALLBACKS[3]))
def HandlePickedUpCallback(call: CallbackQuery) -> None:
    buyout_id = call.data.split('_')[1]
    try:
        CUR.execute("UPDATE buyouts SET pick_up_time = NOW() WHERE id = %s", (buyout_id,))
        CON.commit()
        BOT.send_message(call.from_user.id, '‚úÖ –ß–µ—Ç–∫–æ, –≤–∏–∂—É –∑–∞–±—Ä–∞–ª!')
    except Exception as e:
        BOT.send_message(call.from_user.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!')
        Stamp(f'Error while handling picked up callback: {str(e)}', 'e')


@BOT.callback_query_handler(func=lambda call: call.data.startswith(CALLBACKS[4]))
def HandleFeedbackCallback(call: CallbackQuery) -> None:
    buyout_id = call.data.split('_')[1]
    try:
        CON.commit()
        BOT.send_message(call.from_user.id, '‚úÖ –ß–µ—Ç–∫–æ, –≤–∏–∂—É –æ—Ü–µ–Ω–∏–ª!')
    except Exception as e:
        BOT.send_message(call.from_user.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!')
        Stamp(f'Error while handling feedback callback: {str(e)}', 'e')


def AcceptNewUser(message: Message) -> None:
    Stamp(f'User {message.from_user.id} registering at first', 'i')
    CUR.execute("SELECT id FROM users WHERE id = %s", (message.from_user.id,))
    if CUR.fetchone():
        BOT.send_message(message.from_user.id, '‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    else:
        CUR.execute("INSERT INTO users (id) VALUES (%s)", (message.from_user.id,))
        CON.commit()
        USER_STATES[message.from_user.id] = REG_STATES[0]
        BOT.send_message(message.from_user.id, '‚ùî –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:')


def ShowUnconfirmedUsers() -> None:
    CUR.execute('SELECT id FROM users WHERE conf_time IS NULL')
    users = CUR.fetchall()
    if not users:
        BOT.send_message(ADM_ID, '‚ö†Ô∏è –ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!')
        return
    for user in users:
        InlineButtons(ADM_ID,['‚úÖ –ü—Ä–∏–Ω—è—Ç—å', '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å'], ShowUserInfo(user[0]),
                      [f'accept_{user[0]}', f'reject_{user[0]}'])


@BOT.callback_query_handler(func=lambda call: call.data.startswith('accept_'))
def HandleAcceptUser(call: CallbackQuery) -> None:
    user_id = call.data.split('_')[1]
    try:
        CUR.execute("UPDATE users SET conf_time = NOW() WHERE id = %s", (user_id,))
        CON.commit()
        Stamp(f'User {user_id} accepted', 'i')
        BOT.send_message(user_id, '‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!')
        ADM.send_message(call.message.chat.id, f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!')
    except Exception as e:
        ADM.send_message(call.message.chat.id, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
        Stamp(f'Error while handling accept callback: {str(e)}', 'e')


@BOT.callback_query_handler(func=lambda call: call.data.startswith('reject_'))
def HandleRejectUser(call: CallbackQuery) -> None:
    user_id = call.data.split('_')[1]
    try:
        Stamp(f'User {user_id} rejected', 'i')
        BOT.send_message(user_id, '‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã!')
        ADM.send_message(call.message.chat.id, f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω!')
    except Exception as e:
        ADM.send_message(call.message.chat.id, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
        Stamp(f'Error while handling reject callback: {str(e)}', 'e')


@BOT.message_handler(content_types=['text'])
def Start(message: Message) -> None:
    Stamp(f'User {message.from_user.id} requested {message.text}', 'i')
    if message.text == '/start':
        AcceptNewUser(message)
    elif message.text == MENU_BTNS[0]:
        SendBuyouts(message.from_user.id, STATUSES[0])
    elif message.text == MENU_BTNS[1]:
        SendBuyouts(message.from_user.id, STATUSES[1])
    elif message.text == MENU_BTNS[2]:
        SendBuyouts(message.from_user.id, STATUSES[2])
    elif message.text == MENU_BTNS[3]:
        SendBuyouts(message.from_user.id, STATUSES[3])
    elif message.text == MENU_BTNS[4]:
        SendBuyouts(message.from_user.id, STATUSES[4])
    elif message.text == MENU_BTNS[5]:
        SendBuyouts(message.from_user.id, all_statuses=True)
    elif message.text == MENU_BTNS[6]:
        BOT.send_message(message.from_user.id, ShowUserInfo(message.from_user.id))
    else:
        BOT.send_message(message.from_user.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!')
    ShowButtons(message, MENU_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')


@ADM.message_handler(content_types=['text'])
def Start(message: Message) -> None:
    Stamp(f'Admin {message.from_user.id} requested {message.text}', 'i')
    if message.text == '/start':
        ADM.send_message(message.from_user.id, f'ü•π –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username}!'
                                               '–°—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö')
        ShowButtons(message, ADM_BTNS, '‚ùî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
    elif message.text == ADM_BTNS[0]:
        SendBuyouts(message.from_user.id)
    else:
        ShowButtons(message, ADM_BTNS, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!')


if __name__ == '__main__':
    SERVICE = BuildService()
    CUR, CON = AuthorizeDatabase()
    Main()
